import { DetectCourseTypeDirective } from 'src/modules/pages/courses-page/detect-course-type.directive';
import { SearchPipe } from 'src/modules/pages/courses-page/search.pipe';
import { OrderByPipe } from 'src/modules/pages/courses-page/order-by.pipe';
import { By } from '@angular/platform-browser';
import { DurationPipe } from 'src/modules/shared/courses-shared/duration.pipe';
import { CourseComponent } from 'src/modules/pages/courses-page/course/course.component';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { CoursesContainerComponent } from './courses-container.component';

import { Routes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { MatDialogModule } from '@angular/material/dialog';

const routes: Routes = [
  {
    path: '',
    redirectTo: '/courses',
    pathMatch: 'full'
  }
];

describe('CoursesContainerComponent', () => {
  let component: CoursesContainerComponent;
  let fixture: ComponentFixture<CoursesContainerComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        CoursesContainerComponent,
        CourseComponent,
        DurationPipe,
        OrderByPipe,
        SearchPipe,
        DetectCourseTypeDirective
      ],
      imports: [
        RouterTestingModule.withRoutes(routes),
        MatDialogModule
      ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(CoursesContainerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should list 3 courses generated by default in ngOnInit', () => {
    const courseComponentsRendered = fixture.debugElement.queryAll(By.css('app-course'));
    expect(component).toBeTruthy();
    expect(courseComponentsRendered.length).toBeTruthy(3);
  });

  it('should add one more course after clicking on "Add course" button', () => {
    const initialCoursesLength = component.courses.length;
    fixture.debugElement.query(By.css('.button-add-new-course')).triggerEventHandler('click', null);
    expect(component.courses.length).toBeTruthy(initialCoursesLength + 1);
  });

  it('should delete a course after clicking on "Delete course" button on Course component', () => {
    const initialCoursesLength = component.courses.length;
    fixture.debugElement.query(By.css('.delete-button')).triggerEventHandler('click', null);
    // TODO: replace with service spy
    expect(component.courses.length).toBe(initialCoursesLength);
  });

  it('should edit a course after clicking on "Edit course" button on Course component', () => {
    spyOn(component, 'onCourseEdited');
    const initialCoursesLength = component.courses.length;
    fixture.debugElement.query(By.css('.edit-button')).triggerEventHandler('click', null);
    expect(component.courses.length).toBe(initialCoursesLength);
    expect(component.onCourseEdited).toHaveBeenCalledWith(component.courses[0]);
  });
});
